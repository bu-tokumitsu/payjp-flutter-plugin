/*
 * Copyright (c) 2020 PAY, Inc.
 *
 * Use of this source code is governed by a MIT License that can by found in the LICENSE file.
 */

// Code generated by OpenAPI-Generator

part of 'models.dart';

class Card {
  String id = null;

  String object = null;

  int created = null;

  String name = null;

  String last4 = null;

  int expMonth = null;

  int expYear = null;

  CardBrand brand = null;
  //enum brandEnum {  Visa,  MasterCard,  JCB,  American Express,  Diners Club,  Discover,  };{

  String cvcCheck = null;

  String fingerprint = null;

  String addressState = null;

  String addressCity = null;

  String addressLine1 = null;

  String addressLine2 = null;

  String country = null;

  String addressZip = null;

  String addressZipCheck = null;

  String customer = null;

  Object metadata = null;
  Card();

  @override
  String toString() {
    return 'Card[id=$id, object=$object, created=$created, name=$name, last4=$last4, expMonth=$expMonth, expYear=$expYear, brand=$brand, cvcCheck=$cvcCheck, fingerprint=$fingerprint, addressState=$addressState, addressCity=$addressCity, addressLine1=$addressLine1, addressLine2=$addressLine2, country=$country, addressZip=$addressZip, addressZipCheck=$addressZipCheck, customer=$customer, metadata=$metadata, ]';
  }

  Card.fromJson(Map<dynamic, dynamic> json) {
    if (json == null) return;
    id = json['id'];
    object = json['object'];
    created = json['created'];
    name = json['name'];
    last4 = json['last4'];
    expMonth = json['exp_month'];
    expYear = json['exp_year'];
    brand = (json['brand'] == null) ? null : CardBrand.fromJson(json['brand']);
    cvcCheck = json['cvc_check'];
    fingerprint = json['fingerprint'];
    addressState = json['address_state'];
    addressCity = json['address_city'];
    addressLine1 = json['address_line1'];
    addressLine2 = json['address_line2'];
    country = json['country'];
    addressZip = json['address_zip'];
    addressZipCheck = json['address_zip_check'];
    customer = json['customer'];
    metadata = json['metadata'];
  }

  Map<String, dynamic> toJson() {
    Map<String, dynamic> json = {};
    if (id != null) json['id'] = id;
    if (object != null) json['object'] = object;
    if (created != null) json['created'] = created;
    json['name'] = name;
    if (last4 != null) json['last4'] = last4;
    if (expMonth != null) json['exp_month'] = expMonth;
    if (expYear != null) json['exp_year'] = expYear;
    if (brand != null) json['brand'] = brand;
    if (cvcCheck != null) json['cvc_check'] = cvcCheck;
    if (fingerprint != null) json['fingerprint'] = fingerprint;
    json['address_state'] = addressState;
    json['address_city'] = addressCity;
    json['address_line1'] = addressLine1;
    json['address_line2'] = addressLine2;
    json['country'] = country;
    json['address_zip'] = addressZip;
    if (addressZipCheck != null) json['address_zip_check'] = addressZipCheck;
    json['customer'] = customer;
    if (metadata != null) json['metadata'] = metadata;
    return json;
  }

  static List<Card> listFromJson(List<dynamic> json) {
    return json == null
        ? List<Card>()
        : json.map((value) => Card.fromJson(value)).toList();
  }

  static Map<String, Card> mapFromJson(Map<String, dynamic> json) {
    var map = Map<String, Card>();
    if (json != null && json.isNotEmpty) {
      json.forEach(
          (String key, dynamic value) => map[key] = Card.fromJson(value));
    }
    return map;
  }

  // maps a json object with a list of Card-objects as value to a dart map
  static Map<String, List<Card>> mapListFromJson(Map<String, dynamic> json) {
    var map = Map<String, List<Card>>();
    if (json != null && json.isNotEmpty) {
      json.forEach((String key, dynamic value) {
        map[key] = Card.listFromJson(value);
      });
    }
    return map;
  }
}

// ignore_for_file: avoid_init_to_null, prefer_expression_function_bodies, omit_local_variable_types, prefer_collection_literals, curly_braces_in_flow_control_structures, avoid_types_on_closure_parameters, unnecessary_const, constant_identifier_names, unnecessary_new
