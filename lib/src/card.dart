// Code generated by OpenAPI-Generator

part of 'models.dart';

class Card {
  /* car_で始まり一意なオブジェクトを示す、最大32桁の文字列 */
  late String id;
  /* \\\"card\\\"の固定文字列 */
  late String object;
  /* カード作成時のタイムスタンプ */
  late int created;
  /* カード保有者名 */
  String? name = null;
  /* カード番号の下四桁 */
  late String last4;
  /* 有効期限月 */
  late int expMonth;
  /* 有効期限年 */
  late int expYear;

  late CardBrand brand;
  //enum brandEnum {  Visa,  MasterCard,  JCB,  American Express,  Diners Club,  Discover,  };{
  /* CVCコードチェックの結果 */
  String? cvcCheck = null;
  /* 3Dセキュアの実施結果。 加盟店において3Dセキュアが有効でない等未実施の場合null。  */
  String? threeDSecureStatus = null;
  /* このクレジットカード番号に紐づく値。 同一番号のカードからは同一の値が生成されることが保証されており、 トークン化の度にトークンIDは変わりますが、この値は変わりません。  */
  late String fingerprint;
  /* 都道府県 */
  String? addressState = null;
  /* 市区町村 */
  String? addressCity = null;
  /* 番地など */
  String? addressLine1 = null;
  /* 建物名など */
  String? addressLine2 = null;
  /* 2桁のISOコード(e.g. JP) */
  String? country = null;
  /* 郵便番号 */
  String? addressZip = null;
  /* 郵便番号存在チェックの結果 */
  String? addressZipCheck = null;
  /* 顧客オブジェクトのID */
  String? customer = null;
  /* キーバリューの任意データ */
  late Object metadata;
  Card();

  @override
  String toString() {
    return 'Card[id=$id, object=$object, created=$created, name=$name, last4=$last4, expMonth=$expMonth, expYear=$expYear, brand=$brand, cvcCheck=$cvcCheck, threeDSecureStatus=$threeDSecureStatus, fingerprint=$fingerprint, addressState=$addressState, addressCity=$addressCity, addressLine1=$addressLine1, addressLine2=$addressLine2, country=$country, addressZip=$addressZip, addressZipCheck=$addressZipCheck, customer=$customer, metadata=$metadata, ]';
  }

  Card.fromJson(Map<dynamic, dynamic> json) {
    id = json['id'];
    object = json['object'];
    created = json['created'];
    name = json['name'];
    last4 = json['last4'];
    expMonth = json['exp_month'];
    expYear = json['exp_year'];
    brand = CardBrand.fromJson(json['brand']);
    cvcCheck = json['cvc_check'];
    threeDSecureStatus = json['three_d_secure_status'];
    fingerprint = json['fingerprint'];
    addressState = json['address_state'];
    addressCity = json['address_city'];
    addressLine1 = json['address_line1'];
    addressLine2 = json['address_line2'];
    country = json['country'];
    addressZip = json['address_zip'];
    addressZipCheck = json['address_zip_check'];
    customer = json['customer'];
    metadata = json['metadata'];
  }

  Map<String, dynamic> toJson() {
    Map<String, dynamic> json = {};
    json['id'] = id;
    json['object'] = object;
    json['created'] = created;
    json['name'] = name;
    json['last4'] = last4;
    json['exp_month'] = expMonth;
    json['exp_year'] = expYear;
    json['brand'] = brand;
    if (cvcCheck != null) json['cvc_check'] = cvcCheck;
    if (threeDSecureStatus != null)
      json['three_d_secure_status'] = threeDSecureStatus;
    json['fingerprint'] = fingerprint;
    json['address_state'] = addressState;
    json['address_city'] = addressCity;
    json['address_line1'] = addressLine1;
    json['address_line2'] = addressLine2;
    json['country'] = country;
    json['address_zip'] = addressZip;
    if (addressZipCheck != null) json['address_zip_check'] = addressZipCheck;
    json['customer'] = customer;
    json['metadata'] = metadata;
    return json;
  }

  static List<Card> listFromJson(List<dynamic> json) {
    return json.map((value) => Card.fromJson(value)).toList();
  }

  static Map<String, Card> mapFromJson(Map<String, dynamic> json) {
    var map = Map<String, Card>();
    if (json.isNotEmpty) {
      json.forEach(
          (String key, dynamic value) => map[key] = Card.fromJson(value));
    }
    return map;
  }

  // maps a json object with a list of Card-objects as value to a dart map
  static Map<String, List<Card>> mapListFromJson(Map<String, dynamic> json) {
    var map = Map<String, List<Card>>();
    if (json.isNotEmpty) {
      json.forEach((String key, dynamic value) {
        map[key] = Card.listFromJson(value);
      });
    }
    return map;
  }
}

// ignore_for_file: avoid_init_to_null, prefer_expression_function_bodies, omit_local_variable_types, prefer_collection_literals, curly_braces_in_flow_control_structures, avoid_types_on_closure_parameters, unnecessary_const, constant_identifier_names, unnecessary_new
